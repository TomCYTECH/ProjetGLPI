-------------------------------
-- CREATION DES UTILISATEURS --
-------------------------------

ALTER SESSION SET "_ORACLE_SCRIPT"=true;
CREATE USER glpi IDENTIFIED BY glpi;
GRANT CONNECT, RESOURCE, DBA TO glpi;
CONNECT glpi/glpi;
ALTER SESSION SET "_ORACLE_SCRIPT"=true;

-- Cergy
CREATE USER glpi_cergy IDENTIFIED BY glpi_cergy;
CREATE USER cergy_admin IDENTIFIED BY cergy_admin;
CREATE USER cergy_technicien IDENTIFIED BY cergy_technicien;
CREATE USER cergy_utilisateur IDENTIFIED BY cergy_utilisateur;

-- Pau
CREATE USER glpi_pau IDENTIFIED BY glpi_pau;
CREATE USER pau_admin IDENTIFIED BY pau_admin;
CREATE USER pau_technicien IDENTIFIED BY pau_technicien;
CREATE USER pau_utilisateur IDENTIFIED BY pau_utilisateur;

-------------------------------
-- CREATION DES UTILISATEURS --
-------------------------------


-------------------------------------
-- ATTRIBUTION DES ROLES ET DROITS --
-------------------------------------

-- Cergy
GRANT CONNECT, RESOURCE TO glpi_cergy;
GRANT CREATE TABLE, CREATE VIEW, CREATE PROCEDURE TO glpi_cergy;
GRANT EXECUTE ANY PROCEDURE TO glpi_cergy;

GRANT CONNECT TO cergy_admin, cergy_technicien, cergy_utilisateur;

CREATE ROLE cergy_admin_role;
CREATE ROLE cergy_technicien_role;
CREATE ROLE cergy_utilisateur_role;

GRANT ALL PRIVILEGES TO cergy_admin_role;

GRANT cergy_admin_role TO cergy_admin;
GRANT cergy_technicien_role TO cergy_technicien;
GRANT cergy_utilisateur_role TO cergy_utilisateur;

-- Pau
GRANT CONNECT, RESOURCE TO glpi_pau;
GRANT CREATE TABLE, CREATE VIEW, CREATE PROCEDURE TO glpi_pau;
GRANT EXECUTE ANY PROCEDURE TO glpi_pau;

GRANT CONNECT TO pau_admin, pau_technicien, pau_utilisateur;

CREATE ROLE pau_admin_role;
CREATE ROLE pau_technicien_role;
CREATE ROLE pau_utilisateur_role;

GRANT ALL PRIVILEGES TO pau_admin_role;

GRANT pau_admin_role TO pau_admin;
GRANT pau_technicien_role TO pau_technicien;
GRANT pau_utilisateur_role TO pau_utilisateur;

-------------------------------------
-- ATTRIBUTION DES ROLES ET DROITS --
-------------------------------------


----------------------------
-- CREATION DU TABLESPACE --
----------------------------

CREATE TABLESPACE glpi_data DATAFILE 'glpi_data01.dbf' SIZE 200M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;
ALTER USER glpi_cergy QUOTA 100M ON glpi_data;
ALTER USER glpi_pau QUOTA 100M ON glpi_data;

----------------------------
-- CREATION DU TABLESPACE --
----------------------------


-------------------------
-- CREATION DES TABLES --
-------------------------

-- Cergy
CREATE TABLE glpi_cergy.GLPI_LIEU (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOM VARCHAR2(100),
    CONSTRAINT PK_LIEU PRIMARY KEY (ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_cergy.GLPI_TYPE (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOM VARCHAR2(100),
    DESCRIPTION VARCHAR2(1000),
    CONSTRAINT PK_TYPE PRIMARY KEY (ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_cergy.GLPI_SITE (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    LIEU_ID NUMBER(10),
    NOM VARCHAR2(100),
    CONSTRAINT PK_SITE PRIMARY KEY (ID),
    CONSTRAINT FK_SITE_LIEU FOREIGN KEY (LIEU_ID) REFERENCES glpi_cergy.GLPI_LIEU(ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_cergy.GLPI_EQUIPEMENT (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NUMERO_SERIE VARCHAR2(100) NOT NULL UNIQUE,
    NOM VARCHAR2(100),
    TYPE_ID NUMBER(10),
    LIEU_ID NUMBER(10),
    SITE_ID NUMBER(10),
    CONSTRAINT PK_EQUIPEMENT PRIMARY KEY (ID),
    CONSTRAINT FK_TYPE FOREIGN KEY (TYPE_ID) REFERENCES glpi_cergy.GLPI_TYPE(ID),
    CONSTRAINT FK_EQUIPEMENT_LIEU FOREIGN KEY (LIEU_ID) REFERENCES glpi_cergy.GLPI_LIEU(ID),
    CONSTRAINT FK_SITE FOREIGN KEY (SITE_ID) REFERENCES glpi_cergy.GLPI_SITE(ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_cergy.GLPI_UTILISATEUR (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOM VARCHAR2(100),
    PRENOM VARCHAR2(100),
    EMAIL VARCHAR2(100),
    ROLE VARCHAR(20) CONSTRAINT role_check CHECK (ROLE IN ('ADMINISTRATEUR', 'TECHNICIEN', 'UTILISATEUR')),
    SITE_ID NUMBER(10),
    CONSTRAINT PK_UTILISATEUR PRIMARY KEY (ID),
    CONSTRAINT FK_SITE_UTILISATEUR FOREIGN KEY (SITE_ID) REFERENCES glpi_cergy.GLPI_SITE(ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_cergy.GLPI_TICKET (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOM VARCHAR2(100),
    EQUIPEMENT_ID NUMBER(10),
    CREATION_DATE DATE,
    UTILISATEUR_ID NUMBER(10),
    DESCRIPTION VARCHAR2(1000),
    SITE_ID NUMBER(10),
    STATUT VARCHAR2(20) CONSTRAINT staut_check CHECK (STATUT IN ('EN_COURS', 'OUVERT', 'FERME')),
    CONSTRAINT PK_TICKET PRIMARY KEY (ID),
    CONSTRAINT FK_TICKETS_EQUIPEMENT FOREIGN KEY (EQUIPEMENT_ID) REFERENCES glpi_cergy.GLPI_EQUIPEMENT(ID),
    CONSTRAINT FK_UTILISATEUR_TICKET FOREIGN KEY (UTILISATEUR_ID) REFERENCES glpi_cergy.GLPI_UTILISATEUR(ID),
    CONSTRAINT FK_SITE_TICKET FOREIGN KEY (SITE_ID) REFERENCES glpi_cergy.GLPI_SITE(ID)
) TABLESPACE glpi_data;

-- Vérifier qu'à l'insertion, les dates correspondent
CREATE TABLE glpi_cergy.GLPI_LOCATION (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    EQUIPEMENT_ID NUMBER(10),
    UTILISATEUR_ID NUMBER(10),
    DEBUT DATE,
    FIN DATE,
    CONSTRAINT PK_LOCATION PRIMARY KEY (ID),
    CONSTRAINT FK_LOCATION_EQUIPEMENT FOREIGN KEY (EQUIPEMENT_ID) REFERENCES glpi_cergy.GLPI_EQUIPEMENT(ID),
    CONSTRAINT FK_LOCATION_UTILISATEUR FOREIGN KEY (UTILISATEUR_ID) REFERENCES glpi_cergy.GLPI_EQUIPEMENT(ID)
) TABLESPACE glpi_data;

-- Pau
CREATE TABLE glpi_pau.GLPI_LIEU (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOM VARCHAR2(100),
    CONSTRAINT PK_LIEU PRIMARY KEY (ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_pau.GLPI_TYPE (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOM VARCHAR2(100),
    DESCRIPTION VARCHAR2(1000),
    CONSTRAINT PK_TYPE PRIMARY KEY (ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_pau.GLPI_SITE (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    LIEU_ID NUMBER(10),
    NOM VARCHAR2(100),
    CONSTRAINT PK_SITE PRIMARY KEY (ID),
    CONSTRAINT FK_SITE_LIEU FOREIGN KEY (LIEU_ID) REFERENCES glpi_pau.GLPI_LIEU(ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_pau.GLPI_EQUIPEMENT (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NUMERO_SERIE VARCHAR2(100) NOT NULL UNIQUE,
    NOM VARCHAR2(100),
    TYPE_ID NUMBER(10),
    LIEU_ID NUMBER(10),
    SITE_ID NUMBER(10),
    CONSTRAINT PK_EQUIPEMENT PRIMARY KEY (ID),
    CONSTRAINT FK_TYPE FOREIGN KEY (TYPE_ID) REFERENCES glpi_pau.GLPI_TYPE(ID),
    CONSTRAINT FK_EQUIPEMENT_LIEU FOREIGN KEY (LIEU_ID) REFERENCES glpi_pau.GLPI_LIEU(ID),
    CONSTRAINT FK_SITE FOREIGN KEY (SITE_ID) REFERENCES glpi_pau.GLPI_SITE(ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_pau.GLPI_UTILISATEUR (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOM VARCHAR2(100),
    PRENOM VARCHAR2(100),
    EMAIL VARCHAR2(100),
    ROLE VARCHAR(20) CONSTRAINT role_check CHECK (ROLE IN ('ADMINISTRATEUR', 'TECHNICIEN', 'UTILISATEUR')),
    SITE_ID NUMBER(10),
    CONSTRAINT PK_UTILISATEUR PRIMARY KEY (ID),
    CONSTRAINT FK_SITE_UTILISATEUR FOREIGN KEY (SITE_ID) REFERENCES glpi_pau.GLPI_SITE(ID)
) TABLESPACE glpi_data;

CREATE TABLE glpi_pau.GLPI_TICKET (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOM VARCHAR2(100),
    EQUIPEMENT_ID NUMBER(10),
    CREATION_DATE DATE,
    UTILISATEUR_ID NUMBER(10),
    DESCRIPTION VARCHAR2(1000),
    SITE_ID NUMBER(10),
    STATUT VARCHAR2(20) CONSTRAINT staut_check CHECK (STATUT IN ('EN_COURS', 'OUVERT', 'FERME')),
    CONSTRAINT PK_TICKET PRIMARY KEY (ID),
    CONSTRAINT FK_TICKETS_EQUIPEMENT FOREIGN KEY (EQUIPEMENT_ID) REFERENCES glpi_pau.GLPI_EQUIPEMENT(ID),
    CONSTRAINT FK_UTILISATEUR_TICKET FOREIGN KEY (UTILISATEUR_ID) REFERENCES glpi_pau.GLPI_UTILISATEUR(ID),
    CONSTRAINT FK_SITE_TICKET FOREIGN KEY (SITE_ID) REFERENCES glpi_pau.GLPI_SITE(ID)
) TABLESPACE glpi_data;

-- Vérifier qu'à l'insertion, les dates correspondent
CREATE TABLE glpi_pau.GLPI_LOCATION (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    EQUIPEMENT_ID NUMBER(10),
    UTILISATEUR_ID NUMBER(10),
    DEBUT DATE,
    FIN DATE,
    CONSTRAINT PK_LOCATION PRIMARY KEY (ID),
    CONSTRAINT FK_LOCATION_EQUIPEMENT FOREIGN KEY (EQUIPEMENT_ID) REFERENCES glpi_pau.GLPI_EQUIPEMENT(ID),
    CONSTRAINT FK_LOCATION_UTILISATEUR FOREIGN KEY (UTILISATEUR_ID) REFERENCES glpi_pau.GLPI_EQUIPEMENT(ID)
) TABLESPACE glpi_data;

COMMIT;

-------------------------
-- CREATION DES TABLES --
-------------------------

---------------------------
-- CREATION DES TRIGGERS --
---------------------------

-- Cergy
-- Trigger pour vérifier que les dates de début et de fin dans la table GLPI_LOCATION correspondent aux dates de création du tickets
CONNECT glpi_cergy/glpi_cergy;
ALTER SESSION SET "_ORACLE_SCRIPT"=true;

CREATE OR REPLACE TRIGGER check_location_dates
BEFORE INSERT ON GLPI_LOCATION
FOR EACH ROW
DECLARE
    creation_date DATE;
BEGIN
    -- Sélectionner la date de création du ticket associé à partir de GLPI_TICKET
    SELECT CREATION_DATE INTO creation_date FROM GLPI_TICKET WHERE ID = :new.TICKET_ID;

    -- Vérifier si la date de début et la date de fin sont postérieures à la date de création du ticket
    IF (creation_date IS NOT NULL AND (:new.DEBUT < creation_date OR :new.FIN < creation_date)) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Les dates de début et de fin doivent être postérieures à la date de création du ticket.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL; -- Gérer l'absence de ticket associé si nécessaire
END;
/


-- Trigger pour s'assurer qu'un équipement ne peut pas être assigné à deux sites différents
CREATE OR REPLACE TRIGGER check_equipment_site
BEFORE INSERT OR UPDATE ON GLPI_EQUIPEMENT
FOR EACH ROW
DECLARE
    site_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO site_count FROM GLPI_SITE WHERE ID = :new.SITE_ID;
    
    IF (site_count = 0) THEN
        RAISE_APPLICATION_ERROR(-20002, 'L''équipement doit être associé à un site existant.');
    END IF;
END;
/

-- Trigger pour s'assurer qu'un ticket ne peut pas être créé sans équipement
CREATE OR REPLACE TRIGGER check_ticket_equipment
BEFORE INSERT ON GLPI_TICKET
FOR EACH ROW
DECLARE
    equipment_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO equipment_count FROM GLPI_EQUIPEMENT WHERE ID = :new.EQUIPEMENT_ID;
    
    IF (equipment_count = 0) THEN
        RAISE_APPLICATION_ERROR(-20003, 'Le ticket doit être associé à un équipement existant.');
    END IF;
END;
/

-- Trigger pour s'assurer qu'un ticket ne peut pas être créé sans utilisateur
CREATE OR REPLACE TRIGGER check_ticket_user
BEFORE INSERT ON GLPI_TICKET
FOR EACH ROW
DECLARE
    user_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO user_count FROM GLPI_UTILISATEUR WHERE ID = :new.UTILISATEUR_ID;
    
    IF (user_count = 0) THEN
        RAISE_APPLICATION_ERROR(-20004, 'Le ticket doit être associé à un utilisateur existant.');
    END IF;
END;
/ 


CREATE OR REPLACE TRIGGER assign_technician
BEFORE INSERT ON GLPI_TICKET
FOR EACH ROW
DECLARE
    v_technician_id NUMBER;
BEGIN
    -- Vérifier si le ticket n'a pas déjà un technicien attribué
    IF :new.UTILISATEUR_ID IS NULL THEN
        -- Sélectionner un technicien disponible dans la base de données
        SELECT ID INTO v_technician_id
        FROM GLPI_UTILISATEUR
        WHERE ROLE = 'TECHNICIEN' AND ROWNUM = 1; -- Choisissez le premier technicien disponible, vous pouvez ajuster la logique selon vos besoins
        
        -- Attribuer le technicien au nouveau ticket
        :new.UTILISATEUR_ID := v_technician_id;
    END IF;
END;
/

CONNECT glpi_pau/glpi_pau;
ALTER SESSION SET "_ORACLE_SCRIPT"=true;

CREATE OR REPLACE TRIGGER check_location_dates
BEFORE INSERT ON GLPI_LOCATION
FOR EACH ROW
DECLARE
    creation_date DATE;
BEGIN
    -- Sélectionner la date de création du ticket associé à partir de GLPI_TICKET
    SELECT CREATION_DATE INTO creation_date FROM GLPI_TICKET WHERE ID = :new.TICKET_ID;

    -- Vérifier si la date de début et la date de fin sont postérieures à la date de création du ticket
    IF (creation_date IS NOT NULL AND (:new.DEBUT < creation_date OR :new.FIN < creation_date)) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Les dates de début et de fin doivent être postérieures à la date de création du ticket.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL; -- Gérer l'absence de ticket associé si nécessaire
END;
/


-- Trigger pour s'assurer qu'un équipement ne peut pas être assigné à deux sites différents
CREATE OR REPLACE TRIGGER check_equipment_site
BEFORE INSERT OR UPDATE ON GLPI_EQUIPEMENT
FOR EACH ROW
DECLARE
    site_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO site_count FROM GLPI_SITE WHERE ID = :new.SITE_ID;
    
    IF (site_count = 0) THEN
        RAISE_APPLICATION_ERROR(-20002, 'L''équipement doit être associé à un site existant.');
    END IF;
END;
/

-- Trigger pour s'assurer qu'un ticket ne peut pas être créé sans équipement
CREATE OR REPLACE TRIGGER check_ticket_equipment
BEFORE INSERT ON GLPI_TICKET
FOR EACH ROW
DECLARE
    equipment_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO equipment_count FROM GLPI_EQUIPEMENT WHERE ID = :new.EQUIPEMENT_ID;
    
    IF (equipment_count = 0) THEN
        RAISE_APPLICATION_ERROR(-20003, 'Le ticket doit être associé à un équipement existant.');
    END IF;
END;
/

-- Trigger pour s'assurer qu'un ticket ne peut pas être créé sans utilisateur
CREATE OR REPLACE TRIGGER check_ticket_user
BEFORE INSERT ON GLPI_TICKET
FOR EACH ROW
DECLARE
    user_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO user_count FROM GLPI_UTILISATEUR WHERE ID = :new.UTILISATEUR_ID;
    
    IF (user_count = 0) THEN
        RAISE_APPLICATION_ERROR(-20004, 'Le ticket doit être associé à un utilisateur existant.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER assign_technician
BEFORE INSERT ON GLPI_TICKET
FOR EACH ROW
DECLARE
    v_technician_id NUMBER;
BEGIN
    -- Vérifier si le ticket n'a pas déjà un technicien attribué
    IF :new.UTILISATEUR_ID IS NULL THEN
        -- Sélectionner un technicien disponible dans la base de données
        SELECT ID INTO v_technician_id
        FROM GLPI_UTILISATEUR
        WHERE ROLE = 'TECHNICIEN' AND ROWNUM = 1; -- Choisissez le premier technicien disponible, vous pouvez ajuster la logique selon vos besoins
        
        -- Attribuer le technicien au nouveau ticket
        :new.UTILISATEUR_ID := v_technician_id;
    END IF;
END;
/
CONNECT glpi/glpi;
ALTER SESSION SET "_ORACLE_SCRIPT"=true;

---------------------------
-- CREATION DES TRIGGERS --
---------------------------


-------------------------
-- CREATION DES TABLES --
-------------------------

------------------------
-- CREATION DES INDEX --
------------------------

-- Cergy
CREATE INDEX cergy_index_glpi_site_lieu_id ON glpi_cergy.GLPI_SITE (LIEU_ID);
CREATE INDEX cergy_index_glpi_equipement_type_id ON glpi_cergy.GLPI_EQUIPEMENT (TYPE_ID);
CREATE INDEX cergy_index_glpi_equipement_lieu_id ON glpi_cergy.GLPI_EQUIPEMENT (LIEU_ID);
CREATE INDEX cergy_index_glpi_equipement_site_id ON glpi_cergy.GLPI_EQUIPEMENT (SITE_ID);
CREATE INDEX cergy_index_glpi_utilisateur_site_id ON glpi_cergy.GLPI_UTILISATEUR (SITE_ID);
CREATE INDEX cergy_index_glpi_ticket_equipement_id ON glpi_cergy.GLPI_TICKET (EQUIPEMENT_ID);
CREATE INDEX cergy_index_glpi_ticket_utilisateur_id ON glpi_cergy.GLPI_TICKET (UTILISATEUR_ID);
CREATE INDEX cergy_index_glpi_ticket_site_id ON glpi_cergy.GLPI_TICKET (SITE_ID);
CREATE INDEX cergy_index_glpi_location_equipement_id ON glpi_cergy.GLPI_LOCATION (EQUIPEMENT_ID);

-- Pau
CREATE INDEX pau_index_glpi_site_lieu_id ON glpi_pau.GLPI_SITE (LIEU_ID);
CREATE INDEX pau_index_glpi_equipement_type_id ON glpi_pau.GLPI_EQUIPEMENT (TYPE_ID);
CREATE INDEX pau_index_glpi_equipement_lieu_id ON glpi_pau.GLPI_EQUIPEMENT (LIEU_ID);
CREATE INDEX pau_index_glpi_equipement_site_id ON glpi_pau.GLPI_EQUIPEMENT (SITE_ID);
CREATE INDEX pau_index_glpi_utilisateur_site_id ON glpi_pau.GLPI_UTILISATEUR (SITE_ID);
CREATE INDEX pau_index_glpi_ticket_equipement_id ON glpi_pau.GLPI_TICKET (EQUIPEMENT_ID);
CREATE INDEX pau_index_glpi_ticket_utilisateur_id ON glpi_pau.GLPI_TICKET (UTILISATEUR_ID);
CREATE INDEX pau_index_glpi_ticket_site_id ON glpi_pau.GLPI_TICKET (SITE_ID);
CREATE INDEX pau_index_glpi_location_equipement_id ON glpi_pau.GLPI_LOCATION (EQUIPEMENT_ID);
------------------------
-- CREATION DES INDEX --
------------------------


-----------------------
-- CREATION DES VUES --
-----------------------

-- Cergy
-- Vue qui résume tous les éléments d'un équipement
CREATE OR REPLACE VIEW glpi_cergy.view_equipement_details AS
SELECT e.ID, e.NOM AS Equipment_Name, t.NOM AS Type, l.NOM AS Location, s.NOM AS Site
FROM GLPI_EQUIPEMENT e
JOIN GLPI_TYPE t ON e.TYPE_ID = t.ID
JOIN GLPI_LIEU l ON e.LIEU_ID = l.ID
JOIN GLPI_SITE s ON e.SITE_ID = s.ID;

-- Vue qui résume les équipements d'un site
CREATE OR REPLACE VIEW glpi_cergy.view_equipements_site AS
SELECT s.NOM AS Site, t.NOM AS Type, COUNT(e.ID) AS Equipment_Count
FROM GLPI_SITE s
JOIN GLPI_EQUIPEMENT e ON s.ID = e.SITE_ID
JOIN GLPI_TYPE t ON e.TYPE_ID = t.ID
GROUP BY s.NOM, t.NOM;

-- Vue qui résume les équipements disponibles (Technicien et utilisateur)
CREATE OR REPLACE VIEW glpi_cergy.view_equipements_disponibles AS
SELECT e.NOM AS Equipment, e.ID, CASE WHEN l.FIN < CURRENT_DATE THEN 'Disponible' ELSE 'Indisponible' END AS Status
FROM GLPI_EQUIPEMENT e
LEFT JOIN GLPI_LOCATION l ON e.ID = l.EQUIPEMENT_ID
ORDER BY e.ID;

-- Vue qui donne les utilisateurs par site
CREATE OR REPLACE VIEW glpi_cergy.view_utilisateurs_par_site AS
SELECT u.ID, u.NOM, u.PRENOM, u.EMAIL, u.ROLE, s.NOM AS Site
FROM GLPI_UTILISATEUR u
JOIN GLPI_SITE s ON u.SITE_ID = s.ID;


-----------
-- ADMIN --
-----------

-- Vue qui détaille les équipements
CREATE OR REPLACE VIEW glpi_cergy.view_equipements_details AS
SELECT e.ID, e.NUMERO_SERIE, e.NOM, t.NOM AS Type, l.NOM AS Lieu, s.NOM AS Site, CASE WHEN loc.DEBUT IS NOT NULL AND loc.FIN > SYSDATE THEN 'Loué' ELSE 'Disponible' END AS Statut
FROM GLPI_EQUIPEMENT e
JOIN GLPI_TYPE t ON e.TYPE_ID = t.ID
JOIN GLPI_LIEU l ON e.LIEU_ID = l.ID
JOIN GLPI_SITE s ON e.SITE_ID = s.ID
LEFT JOIN GLPI_LOCATION loc ON e.ID = loc.EQUIPEMENT_ID;

-- Vue qui détaille la les utilisateurs et l'état de leurs tickets
CREATE OR REPLACE VIEW glpi_cergy.view_utilisateurs_tickets AS
SELECT u.ID, u.NOM, u.PRENOM, u.EMAIL, u.ROLE, t.ID AS Ticket_ID, t.STATUT, t.CREATION_DATE
FROM GLPI_UTILISATEUR u
LEFT JOIN GLPI_TICKET t ON u.ID = t.UTILISATEUR_ID;


----------------
-- TECHNICIEN --
----------------

-- Vue des tickets ouverts
CREATE OR REPLACE VIEW glpi_cergy.view_technicien_tickets_ouverts AS
SELECT t.ID, t.NOM, t.DESCRIPTION, t.CREATION_DATE, u.NOM || ' ' || u.PRENOM AS Demande_Par
FROM GLPI_TICKET t
JOIN GLPI_UTILISATEUR u ON t.UTILISATEUR_ID = u.ID
WHERE t.STATUT = 'OUVERT';

-- Vue des tickets en cours
CREATE OR REPLACE VIEW glpi_cergy.view_technicien_tickets_en_cours AS
SELECT t.ID, t.NOM, t.DESCRIPTION, t.CREATION_DATE, u.NOM || ' ' || u.PRENOM AS Demande_Par
FROM GLPI_TICKET t
JOIN GLPI_UTILISATEUR u ON t.UTILISATEUR_ID = u.ID
WHERE t.STATUT = 'EN_COURS';

-- Vue des tickets fermés
CREATE OR REPLACE VIEW glpi_cergy.view_technicien_tickets_fermes AS
SELECT t.ID, t.NOM, t.DESCRIPTION, t.CREATION_DATE, u.NOM || ' ' || u.PRENOM AS Demande_Par
FROM GLPI_TICKET t
JOIN GLPI_UTILISATEUR u ON t.UTILISATEUR_ID = u.ID
WHERE t.STATUT = 'FERME';

-- Vue des tickets pour un utilisateur
CREATE OR REPLACE VIEW glpi_cergy.view_tickets_utilisateur AS
SELECT u.NOM AS User_Name, u.PRENOM AS User_FirstName, t.NOM AS Ticket, t.STATUT AS Status, t.CREATION_DATE, t.DESCRIPTION, e.NOM AS Equipment
FROM GLPI_UTILISATEUR u
JOIN GLPI_TICKET t ON u.ID = t.UTILISATEUR_ID
JOIN GLPI_EQUIPEMENT e ON t.EQUIPEMENT_ID = e.ID;


-----------------
-- UTILISATEUR --
-----------------

-- Vue des équipements disponibles à la location
CREATE OR REPLACE VIEW glpi_cergy.view_utilisateur_equipements_disponibles AS
SELECT e.ID, e.NUMERO_SERIE, e.NOM, t.NOM AS Type, 'Disponible' AS Statut
FROM GLPI_EQUIPEMENT e
JOIN GLPI_TYPE t ON e.TYPE_ID = t.ID
WHERE e.ID NOT IN (SELECT EQUIPEMENT_ID FROM GLPI_LOCATION WHERE FIN > SYSDATE);
COMMIT;

GRANT SELECT, INSERT, UPDATE, DELETE ON glpi_cergy.view_equipements_details TO cergy_admin_role;

GRANT SELECT, UPDATE ON glpi_cergy.view_technicien_tickets_ouverts TO cergy_technicien_role;
GRANT SELECT, UPDATE ON glpi_cergy.view_technicien_tickets_en_cours TO cergy_technicien_role;
GRANT SELECT, UPDATE ON glpi_cergy.view_technicien_tickets_fermes TO cergy_technicien_role;
GRANT SELECT, UPDATE ON glpi_cergy.view_tickets_utilisateur TO cergy_technicien_role;

GRANT SELECT ON glpi_cergy.view_utilisateur_equipements_disponibles TO cergy_utilisateur_role;

-- Pau
-- Vue qui résume tous les éléments d'un équipement
CREATE OR REPLACE VIEW glpi_pau.view_equipement_details AS
SELECT e.ID, e.NOM AS Equipment_Name, t.NOM AS Type, l.NOM AS Location, s.NOM AS Site
FROM GLPI_EQUIPEMENT e
JOIN GLPI_TYPE t ON e.TYPE_ID = t.ID
JOIN GLPI_LIEU l ON e.LIEU_ID = l.ID
JOIN GLPI_SITE s ON e.SITE_ID = s.ID;

-- Vue qui résume les équipements d'un site
CREATE OR REPLACE VIEW glpi_pau.view_equipements_site AS
SELECT s.NOM AS Site, t.NOM AS Type, COUNT(e.ID) AS Equipment_Count
FROM GLPI_SITE s
JOIN GLPI_EQUIPEMENT e ON s.ID = e.SITE_ID
JOIN GLPI_TYPE t ON e.TYPE_ID = t.ID
GROUP BY s.NOM, t.NOM;

-- Vue qui résume les équipements disponibles (Technicien et utilisateur)
CREATE OR REPLACE VIEW glpi_pau.view_equipements_disponibles AS
SELECT e.NOM AS Equipment, e.ID, CASE WHEN l.FIN < CURRENT_DATE THEN 'Disponible' ELSE 'Indisponible' END AS Status
FROM GLPI_EQUIPEMENT e
LEFT JOIN GLPI_LOCATION l ON e.ID = l.EQUIPEMENT_ID
ORDER BY e.ID;

-- Vue qui donne les utilisateurs par site
CREATE OR REPLACE VIEW glpi_pau.view_utilisateurs_par_site AS
SELECT u.ID, u.NOM, u.PRENOM, u.EMAIL, u.ROLE, s.NOM AS Site
FROM GLPI_UTILISATEUR u
JOIN GLPI_SITE s ON u.SITE_ID = s.ID;


-----------
-- ADMIN --
-----------

-- Vue qui détaille les équipements
CREATE OR REPLACE VIEW glpi_pau.view_equipements_details AS
SELECT e.ID, e.NUMERO_SERIE, e.NOM, t.NOM AS Type, l.NOM AS Lieu, s.NOM AS Site, CASE WHEN loc.DEBUT IS NOT NULL AND loc.FIN > SYSDATE THEN 'Loué' ELSE 'Disponible' END AS Statut
FROM GLPI_EQUIPEMENT e
JOIN GLPI_TYPE t ON e.TYPE_ID = t.ID
JOIN GLPI_LIEU l ON e.LIEU_ID = l.ID
JOIN GLPI_SITE s ON e.SITE_ID = s.ID
LEFT JOIN GLPI_LOCATION loc ON e.ID = loc.EQUIPEMENT_ID;

-- Vue qui détaille la les utilisateurs et l'état de leurs tickets
CREATE OR REPLACE VIEW glpi_pau.view_utilisateurs_tickets AS
SELECT u.ID, u.NOM, u.PRENOM, u.EMAIL, u.ROLE, t.ID AS Ticket_ID, t.STATUT, t.CREATION_DATE
FROM GLPI_UTILISATEUR u
LEFT JOIN GLPI_TICKET t ON u.ID = t.UTILISATEUR_ID;


----------------
-- TECHNICIEN --
----------------

-- Vue des tickets ouverts
CREATE OR REPLACE VIEW glpi_pau.view_technicien_tickets_ouverts AS
SELECT t.ID, t.NOM, t.DESCRIPTION, t.CREATION_DATE, u.NOM || ' ' || u.PRENOM AS Demande_Par
FROM GLPI_TICKET t
JOIN GLPI_UTILISATEUR u ON t.UTILISATEUR_ID = u.ID
WHERE t.STATUT = 'OUVERT';

-- Vue des tickets en cours
CREATE OR REPLACE VIEW glpi_pau.view_technicien_tickets_en_cours AS
SELECT t.ID, t.NOM, t.DESCRIPTION, t.CREATION_DATE, u.NOM || ' ' || u.PRENOM AS Demande_Par
FROM GLPI_TICKET t
JOIN GLPI_UTILISATEUR u ON t.UTILISATEUR_ID = u.ID
WHERE t.STATUT = 'EN_COURS';

-- Vue des tickets fermés
CREATE OR REPLACE VIEW glpi_pau.view_technicien_tickets_fermes AS
SELECT t.ID, t.NOM, t.DESCRIPTION, t.CREATION_DATE, u.NOM || ' ' || u.PRENOM AS Demande_Par
FROM GLPI_TICKET t
JOIN GLPI_UTILISATEUR u ON t.UTILISATEUR_ID = u.ID
WHERE t.STATUT = 'FERME';

-- Vue des tickets pour un utilisateur
CREATE OR REPLACE VIEW glpi_pau.view_tickets_utilisateur AS
SELECT u.NOM AS User_Name, u.PRENOM AS User_FirstName, t.NOM AS Ticket, t.STATUT AS Status, t.CREATION_DATE, t.DESCRIPTION, e.NOM AS Equipment
FROM GLPI_UTILISATEUR u
JOIN GLPI_TICKET t ON u.ID = t.UTILISATEUR_ID
JOIN GLPI_EQUIPEMENT e ON t.EQUIPEMENT_ID = e.ID;


-----------------
-- UTILISATEUR --
-----------------

-- Vue des équipements disponibles à la location
CREATE OR REPLACE VIEW glpi_pau.view_utilisateur_equipements_disponibles AS
SELECT e.ID, e.NUMERO_SERIE, e.NOM, t.NOM AS Type, 'Disponible' AS Statut
FROM GLPI_EQUIPEMENT e
JOIN GLPI_TYPE t ON e.TYPE_ID = t.ID
WHERE e.ID NOT IN (SELECT EQUIPEMENT_ID FROM GLPI_LOCATION WHERE FIN > SYSDATE);
COMMIT;

GRANT SELECT, INSERT, UPDATE, DELETE ON glpi_pau.view_equipements_details TO cergy_admin_role;

GRANT SELECT, UPDATE ON glpi_pau.view_technicien_tickets_ouverts TO cergy_technicien_role;
GRANT SELECT, UPDATE ON glpi_pau.view_technicien_tickets_en_cours TO cergy_technicien_role;
GRANT SELECT, UPDATE ON glpi_pau.view_technicien_tickets_fermes TO cergy_technicien_role;
GRANT SELECT, UPDATE ON glpi_pau.view_tickets_utilisateur TO cergy_technicien_role;

GRANT SELECT ON glpi_pau.view_utilisateur_equipements_disponibles TO cergy_utilisateur_role;

-----------------------
-- CREATION DES VUES --
-----------------------